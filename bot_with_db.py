import logging
import sqlite3
import datetime
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ChatMember
from telegram.ext import Application, CommandHandler, CallbackContext, MessageHandler, filters, CallbackQueryHandler
from telegram.error import TelegramError

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç BotFather
TOKEN = "7358724089:AAEN3tVjfM9e9kw61WOMgPtde0QILZ29dhU"

# URL –∏ ID –∫–∞–Ω–∞–ª–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
CHANNEL_URL = "https://t.me/isreal_meta"
CHANNEL_ID = -1002602908716  # –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∫–∞–Ω–∞–ª–∞ –±–µ–∑ @. –ü–æ–ª—É—á–∏—Ç—å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ @userinfobot –∏–ª–∏ API. –ë–æ—Ç –î–û–õ–ñ–ï–ù –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º —Å –ø—Ä–∞–≤–æ–º –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!

# –ò–º—è —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_NAME = "bot_users.db"

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–æ–∫ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram user_id)
ADMIN_ID = 123456789  # TODO: —É–∫–∞–∂–∏ —Å–≤–æ–π user_id

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        is_bot BOOLEAN,
        language_code TEXT,
        joined_date TEXT,
        last_active TEXT,
        is_subscribed BOOLEAN DEFAULT FALSE
    )
    ''')
    conn.commit()
    conn.close()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_or_update_user(user, is_subscribed=False):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ"""
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (user.id,))
    existing_user = cursor.fetchone()
    
    current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    if existing_user:
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('''
        UPDATE users SET 
            username = ?,
            first_name = ?,
            last_name = ?,
            is_bot = ?,
            language_code = ?,
            last_active = ?,
            is_subscribed = ?
        WHERE user_id = ?
        ''', (
            user.username,
            user.first_name,
            user.last_name,
            user.is_bot,
            user.language_code,
            current_time,
            is_subscribed,
            user.id
        ))
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {user.id}")
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('''
        INSERT INTO users (
            user_id, username, first_name, last_name, 
            is_bot, language_code, joined_date, last_active, is_subscribed
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            user.id,
            user.username,
            user.first_name,
            user.last_name,
            user.is_bot,
            user.language_code,
            current_time,
            current_time,
            is_subscribed
        ))
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.id}")
    
    conn.commit()
    conn.close()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª
async def check_subscription(context, user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        chat_member = await context.bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: user_id={user_id}, status={chat_member.status}")
        return chat_member.status in ["member", "administrator", "creator"]
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return None  # None –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å

async def send_error_to_admin(context, error_text):
    try:
        await context.bot.send_message(chat_id=ADMIN_ID, text=f"[BOT ERROR]\n{error_text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: CallbackContext) -> None:
    try:
        user = update.effective_user
        is_subscribed = await check_subscription(context, user.id)
        add_or_update_user(user, is_subscribed)
        if is_subscribed:
            keyboard = [
                [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_URL)],
                [InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å", url="https://insight1010.github.io/isreal/")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_html(
                f"–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ä–µ–∞–ª—å–Ω–æ! üëã\n"
                f"–¢–µ–ø–µ—Ä—å —Ç—ã –≤ –∏–≥—Ä–µ, –≥–¥–µ –≤—Å—ë –º–µ–Ω—è—é—Ç –∏–Ω—Å–∞–π—Ç—ã.\n"
                f"–ù–æ–≤–æ—Å—Ç–∏ –≤ –∫–∞–Ω–∞–ª–µ –ø–æ–¥—Å–∫–∞–∂—É—Ç, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ.\n\n"
                f"–ü–æ–µ—Ö–∞–ª–∏? üöÄ",
                reply_markup=reply_markup
            )
        else:
            keyboard = [
                [InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_URL)],
                [InlineKeyboardButton("‚úÖ –Ø —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_html(
                f"–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ä–µ–∞–ª—å–Ω–æ! üëã\n"
                f"–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–≥—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.\n"
                f"–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–Ø —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è¬ª.\n\n"
                f"–ñ–¥–µ–º —Ç–µ–±—è! üöÄ",
                reply_markup=reply_markup
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}")
        await send_error_to_admin(context, f"–û—à–∏–±–∫–∞ –≤ start: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–Ø —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è"
async def button_callback(update: Update, context: CallbackContext) -> None:
    try:
        query = update.callback_query
        await query.answer()
        user = update.effective_user
        is_subscribed = await check_subscription(context, user.id)
        if is_subscribed is None:
            await query.edit_message_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª @isreal_meta –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å –ø—Ä–∞–≤–æ–º –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!\n\n"
                "–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ ‚Äî –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É."
            )
            return
        add_or_update_user(user, is_subscribed)
        if is_subscribed:
            keyboard = [
                [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_URL)],
                [InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å", url="https://insight1010.github.io/isreal/")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! üéâ\n"
                f"–¢–µ–ø–µ—Ä—å —Ç—ã –≤ –∏–≥—Ä–µ, –≥–¥–µ –≤—Å—ë –º–µ–Ω—è—é—Ç –∏–Ω—Å–∞–π—Ç—ã.\n"
                f"–ù–æ–≤–æ—Å—Ç–∏ –≤ –∫–∞–Ω–∞–ª–µ –ø–æ–¥—Å–∫–∞–∂—É—Ç, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ.\n\n"
                f"–ü–æ–µ—Ö–∞–ª–∏? üöÄ",
                reply_markup=reply_markup
            )
        else:
            keyboard = [
                [InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_URL)],
                [InlineKeyboardButton("‚úÖ –Ø —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                f"–ö–∞–∂–µ—Ç—Å—è, –≤—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–Ø —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è¬ª.\n\n"
                f"–ñ–¥–µ–º –≤–∞—Å! üîç",
                reply_markup=reply_markup
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ button_callback: {e}")
        await send_error_to_admin(context, f"–û—à–∏–±–∫–∞ –≤ button_callback: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: CallbackContext) -> None:
    try:
        user = update.effective_user
        is_subscribed = await check_subscription(context, user.id)
        add_or_update_user(user, is_subscribed)
        if is_subscribed:
            await update.message.reply_text(
                "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
            )
        else:
            keyboard = [
                [InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_URL)],
                [InlineKeyboardButton("‚úÖ –Ø —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–≥—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.",
                reply_markup=reply_markup
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_message: {e}")
        await send_error_to_admin(context, f"–û—à–∏–±–∫–∞ –≤ handle_message: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∞–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞)
async def get_stats(update: Update, context: CallbackContext) -> None:
    try:
        user = update.effective_user
        ADMIN_IDS = [ADMIN_ID]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ADMIN_ID
        if user.id not in ADMIN_IDS:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM users")
        total_users = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM users WHERE is_subscribed = TRUE")
        subscribed_users = cursor.fetchone()[0]
        yesterday = (datetime.datetime.now() - datetime.timedelta(days=1)).strftime("%Y-%m-%d %H:%M:%S")
        cursor.execute("SELECT COUNT(*) FROM users WHERE joined_date > ?", (yesterday,))
        new_users = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM users WHERE last_active > ?", (yesterday,))
        active_users = cursor.fetchone()[0]
        conn.close()
        stats_message = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"‚úÖ –ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –Ω–∞ –∫–∞–Ω–∞–ª: {subscribed_users}\n"
            f"üÜï –ù–æ–≤—ã—Ö –∑–∞ 24 —á–∞—Å–∞: {new_users}\n"
            f"üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24 —á–∞—Å–∞: {active_users}"
        )
        await update.message.reply_text(stats_message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ get_stats: {e}")
        await send_error_to_admin(context, f"–û—à–∏–±–∫–∞ –≤ get_stats: {e}")

def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ç–æ–∫–µ–Ω
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("stats", get_stats))
    application.add_handler(CallbackQueryHandler(button_callback, pattern="check_subscription"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main() 